#!/usr/bin/env node

/**
 * Shared Logger Module
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–æ–¥—É–ª—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤ package-manager
 */

// –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ
const colors = {
  reset: "\x1b[0m",
  bright: "\x1b[1m",
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  magenta: "\x1b[35m",
  cyan: "\x1b[36m",
  white: "\x1b[37m",
};

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
let verbose = false;
let silent = false;

/**
 * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ä–µ–∂–∏–º verbose
 * @param {boolean} value - true –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
 */
function setVerbose(value) {
  verbose = value;
}

/**
 * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ä–µ–∂–∏–º silent
 * @param {boolean} value - true –¥–ª—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
 */
function setSilent(value) {
  silent = value;
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π verbose —Ä–µ–∂–∏–º
 * @returns {boolean}
 */
function isVerbose() {
  return verbose;
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π silent —Ä–µ–∂–∏–º
 * @returns {boolean}
 */
function isSilent() {
  return silent;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
 * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∏–≤–æ–¥—É
 * @param {string} color - –ö–æ–ª—ñ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
 * @param {boolean} force - –ü—Ä–∏–º—É—Å–æ–≤–æ –≤–∏–≤–µ—Å—Ç–∏ –Ω–∞–≤—ñ—Ç—å –≤ silent —Ä–µ–∂–∏–º—ñ
 */
function log(message, color = null, force = false) {
  if (silent && !force) {
    return;
  }

  if (color && colors[color]) {
    console.log(`${colors[color]}${message}${colors.reset}`);
  } else {
    console.log(message);
  }
}

/**
 * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ (–∑–∞–≤–∂–¥–∏ —á–µ—Ä–≤–æ–Ω–∏–º –∫–æ–ª—å–æ—Ä–æ–º)
 * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
 */
function error(message) {
  log(`‚ùå ${message}`, "red", true);
}

/**
 * –õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π (–∑–∞–≤–∂–¥–∏ –∑–µ–ª–µ–Ω–∏–º –∫–æ–ª—å–æ—Ä–æ–º)
 * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
 */
function success(message) {
  log(`‚úÖ ${message}`, "green");
}

/**
 * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å (–∑–∞–≤–∂–¥–∏ –∂–æ–≤—Ç–∏–º –∫–æ–ª—å–æ—Ä–æ–º)
 * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
 */
function warning(message) {
  log(`‚ö†Ô∏è  ${message}`, "yellow");
}

/**
 * –õ–æ–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó (–∑–∞–≤–∂–¥–∏ —Å–∏–Ω—ñ–º –∫–æ–ª—å–æ—Ä–æ–º)
 * @param {string} message - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
function info(message) {
  log(`‚ÑπÔ∏è  ${message}`, "blue");
}

/**
 * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—ñ–≤ (–∑–∞–≤–∂–¥–∏ —Ü—ñ–∞–Ω –∫–æ–ª—å–æ—Ä–æ–º)
 * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ—Ü–µ—Å
 */
function process(message) {
  log(`üîß ${message}`, "cyan");
}

/**
 * –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –≤ verbose —Ä–µ–∂–∏–º—ñ)
 * @param {string} message - –î–µ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 * @param {string} color - –ö–æ–ª—ñ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
 */
function debug(message, color = "cyan") {
  if (verbose) {
    log(`   üîç DEBUG: ${message}`, color);
  }
}

/**
 * –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Å–µ–∫—Ü—ñ–π
 * @param {string} message - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó
 */
function section(message) {
  log(`\nüìã ${message}`, "bright");
}

/**
 * –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫—Ä–æ–∫—ñ–≤ –ø—Ä–æ—Ü–µ—Å—É
 * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∫—Ä–æ–∫
 * @param {number} step - –ù–æ–º–µ—Ä –∫—Ä–æ–∫—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
 */
function step(message, step = null) {
  const prefix = step ? `${step}. ` : "";
  log(`${prefix}${message}`, "blue");
}

/**
 * –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
 * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 * @param {boolean} isSuccess - –ß–∏ —É—Å–ø—ñ—à–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */
function result(message, isSuccess = true) {
  const color = isSuccess ? "green" : "red";
  const icon = isSuccess ? "‚úÖ" : "‚ùå";
  log(`${icon} ${message}`, color);
}

/**
 * –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤
 * @param {Array} items - –ú–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤–∏–≤–æ–¥—É
 * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
 * @param {string} color - –ö–æ–ª—ñ—Ä (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
 */
function list(items, title = null, color = "blue") {
  if (title) {
    log(`\nüìù ${title}:`, color);
  }

  items.forEach((item, index) => {
    log(`   ${index + 1}. ${item}`, color);
  });
}

/**
 * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
 * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–≥—Ä–µ—Å
 * @param {number} current - –ü–æ—Ç–æ—á–Ω–∏–π –∫—Ä–æ–∫
 * @param {number} total - –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤
 */
function progress(message, current, total) {
  const percentage = Math.round((current / total) * 100);
  log(`üîÑ ${message} (${current}/${total} - ${percentage}%)`, "yellow");
}

/**
 * –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ —Ç–∞–π–º—Å—Ç–∞–º–ø–æ–º
 * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 * @param {string} color - –ö–æ–ª—ñ—Ä (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
 */
function timestamp(message, color = null) {
  const now = new Date().toISOString();
  log(`[${now}] ${message}`, color);
}

// –ï–∫—Å–ø–æ—Ä—Ç –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π
module.exports = {
  // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  log,
  error,
  success,
  warning,
  info,
  process,
  debug,
  section,
  step,
  result,
  list,
  progress,
  timestamp,

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
  setVerbose,
  setSilent,
  isVerbose,
  isSilent,

  // –ö–æ–ª—å–æ—Ä–∏ (–¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)
  colors,
};
